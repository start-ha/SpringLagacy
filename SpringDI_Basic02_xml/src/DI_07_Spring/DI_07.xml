<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
	    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	    xsi:schemaLocation="http://www.springframework.org/schema/beans 
	                        http://www.springframework.org/schema/beans/spring-beans.xsd">
<!-- 
	객체의 생성과 조립
	1. 생성자 주입
	2. setter 주입  
 
 	spring 은 자신만의 컨테이너를 제공 ( spring 사용하는 전용 메모리 공간) 안에
 	xml 또는 annotation 를 통해서 객체를 생성하고 조립하는 과정을 수행  (객체 관계 설정)
 	
 	컨테이너 안에 생성된 객체를 불러서 .... 함수 : getbean() 함수 (불러서 사용) > 객체를 생성하는 함수가 아니다**
 	
 	예외적으로 getbean() 사용하면 그때마다 새로운 객체가 생성되게 할 수 있어요 ( 권장하지 않아요) >>>>지우개
 	
 	IOC 컨테이너 (제어의 역전)
 	내가 주도했던 new 키워드를 사용하지 않고 ... Spring 양보 ... Spring 주도(객체의 생성과 죽음)
 	:작은 단위의 부품을 만들어 놓고 조립하고 .... 행위 > Spring > 필요하면 가져도 쓰면 되요
 	
 	    자바코드를 설정으로 ....
 	    ProtocolHandler hander = new ProtocolHandler();
		//JAVA API 제공하는 Collection 사용
		List<MyFilter> list = new ArrayList<>(); 해결 ....
		list.add(new EncFilter());
		list.add(new ZipFilter());
		list.add(new HeaderFilter());
		
		hander.setFilters(list); //주입 대상 JAVA API 제공하는 클래스
 		
 		1단계)
 		필요한 모든 bean  객체를 생성 ( new 있는 것들)
 		사용자가 직업 만들지 않는 클래스 (JAVA API) > Spring 지원 
 		xml 설정에서
 		>> <list>   , <map> , <set>
 -->
	
	 <!-- 1단계 ( 실제 자바코드와 일치하는 코드가 아니네) 
	  <bean id="encFilter"    class="DI_07_Spring.EncFilter"></bean>
	  <bean id="zipFilter"    class="DI_07_Spring.ZipFilter"></bean>
	  <bean id="headerFilter" class="DI_07_Spring.HeaderFilter"></bean>
	  
	  
	  <bean id="protocolHandler" class="DI_07_Spring.ProtocolHandler">
	  		<property name="filters">
	  			<list> new ArrayList()
	  				<ref bean="encFilter"/> list.add(new EncFilter()) 
	  				<ref bean="encFilter"/>
	  				<ref bean="zipFilter"/>
	  			</list>
	  		</property>
	  </bean>
	  -->
	  
	  <!-- xml이 arrayList를 지원해서 new할 필요가 없다 >> java API가 제공하는 것들은 설정도 제공받음 -->
	  
	   <bean id="protocolHandler" class="DI_07_Spring.ProtocolHandler">
	  		<property name="filters">
	  			<list>   
	  			 	<bean class="DI_07_Spring.EncFilter" /> <!-- list.add(new EncFilter()) -->  
	  				<bean class="DI_07_Spring.ZipFilter" />
	  				<bean class="DI_07_Spring.HeaderFilter" />
	  			</list>
	  		</property>
	  </bean>
</beans>



