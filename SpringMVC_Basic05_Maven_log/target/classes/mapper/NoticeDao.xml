<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
1. Mybatis Mapper 작업
1.1  mapper namespace="" 는 DAO 인터페이스와 동일한 경로 
1.2  interface 가지는 함수이름과  xml id="" 동일하게 

**dao.NoticeDao 구현체가 (구현부) mapper 파일 > NoticeDao.xml**
**동기화 
1.1  mapper namespace="" 는 DAO 인터페이스와 동일한 경로 
1.2  interface 가지는 함수이름과  xml id="" 동일하게 

//게시물 개수
public int getCount(String field, String query) throws ClassNotFoundException, SQLException;
	
//전체 게시물
public List<Notice> getNotices(int page, String field, String query) throws ClassNotFoundException, SQLException;
	
//게시물 삭제
public int delete(String seq) throws ClassNotFoundException, SQLException;
	
//게시물 수정
public int update(Notice notice) throws ClassNotFoundException, SQLException;
	
//게시물 상세
public Notice getNotice(String seq) throws ClassNotFoundException, SQLException;
	
//게시물 입력
public int insert(Notice n) throws ClassNotFoundException, SQLException;
 -->
<mapper namespace="dao.NoticeDao">

	<!-- 
	public int getCount(String field, String query)  
	https://cafe.naver.com/msa2025/853 참고로 
	인터페이스 함수 @param 적용
	    int getCount(String field, String query)
		1. parameter 1개 :  생략 or  parameterType="int"
		2. parameter DTO : parameterType="vo.notice"
		3. parameter DTO 아니고 2개 이상인 경우
		
			3.1**** hashMap > map.put(key,value) >> parameterType="hashMap" >> map.put(name,"홍길동")
		
			3.2 mybatis  parameter read : param1 , param2 , param3 정해지 키워드 (가독성 (x) , 한개 짜리 불가))

			3.3 인터페이스 : @param
			
			
		# 타입에 대한 처리  where ename = #{name} >> where ename = '홍길동'  >>  where ename like '%'홍길동'%'
		$ 있는 그대로 출력  where ename = ${name} >> where ename = 홍길동  >>  where ename like '%홍길동%'
		>> 테이블명 , 컬럼명 


		int getCount(String field, String query)
		String field >> param1
		String query >> param2


		
		FROM NOTICES WHERE #{param1}  >> FROM NOTICES WHERE 'TITLE' (x)  >> FROM NOTICES WHERE TITLE 
		LIKE '%#{param1}%'  >> LIKE '%'aa'%'
 -->
	
	<select id="getCount" resultType="int">
		SELECT COUNT(*) CNT FROM NOTICES WHERE ${param1} LIKE '%${param2}%'
	</select>
	
	<!-- 
	public List<Notice> getNotices(int page, String field, String query)
	
	 List<Notice> getNotices(int page, String field, String query) 
  	 int page     > param1
     String field > param2
     String query > param3
  
	 st.setString(1, "%"+query+"%");
	 st.setInt(2, srow);
	 st.setInt(3, erow);
  
     page > [1][2][3][4][5]다음  >> 1번페이지 클릭 >> 1번 ~ 5번글 
       이전[6]
  
     int srow = 1 + (page-1)*5;  >> 1 + (${param1}-1)*5
     int erow = 5 + (page-1)*5;  >> 5 + (${param1}-1)*5 
     
     public List<Notice> getNotices(int page, String field, String query)
     
     resultType="vo.Notice"  한줄의 코드
     
     List<Notice> list = new ArrayList();
     while(){
     	Notice n = new Notice();
     	n.setTitle(rs("title"));
     	...20줄
     }
     
     SELECT * FROM  > SELECT title , content ... 가독성
  -->
	<select id="getNotices" resultType="vo.Notice">
		SELECT * FROM
		            (
		              SELECT ROWNUM NUM, N.* 
		              FROM (
		                     SELECT * 
		                     FROM NOTICES 
		                     WHERE ${param2} LIKE '%${param3}%' ORDER BY REGDATE DESC
		                    ) N
		            )   WHERE NUM BETWEEN 1 + (${param1}-1)*5 AND 5 + (${param1}-1)*5
	</select> 
	<!-- 
	public int delete(String seq) throws ClassNotFoundException, SQLException;
	 
	 parameterType="String" 생략
	 return type 생략 
	 -->
	<delete id="delete">
		DELETE NOTICES WHERE SEQ=#{seq}
	</delete> 
	
	<!--  
	public int update(Notice notice)
	-->
	<update id="update" parameterType="vo.Notice">
		UPDATE NOTICES 
		SET TITLE=#{title}, 
		    CONTENT=#{content}, 
		    FILESRC=#{fileSrc} 
		WHERE SEQ=#{seq}
	</update>
	
	<!--  
	public Notice getNotice(String seq)
	
	Notice notice = new Notice();  mybatis가
	notice.setTitle(rs("title"))
	return notice;
	-->
	<select id="getNotice" resultType="vo.Notice">
		SELECT seq, title, writer, content, regdate, hit, filesrc
		FROM NOTICES 
		WHERE SEQ=#{seq}
	</select>
	
	<!--  
	public int insert(Notice n)
	
	INSERT INTO 
	NOTICES(SEQ, TITLE, CONTENT, WRITER, REGDATE, HIT, FILESRC) 
	VALUES((SELECT MAX(TO_NUMBER(SEQ))+1 FROM NOTICES), ?, ?, 'bituser', SYSDATE, 0, ?)
	
	방법 1)
	<insert id="insert" parameterType="vo.Notice">
		INSERT INTO NOTICES(SEQ, TITLE, CONTENT, WRITER, REGDATE, HIT, FILESRC) 
	    VALUES((SELECT MAX(TO_NUMBER(SEQ))+1 FROM NOTICES), #{title}, #{content}, 'kosa', SYSDATE, 0, #{fileSrc})
	</insert>
	-->
	<insert id="insert" parameterType="vo.Notice">
		<selectKey order="BEFORE" keyProperty="seq" resultType="String">
			SELECT MAX(TO_NUMBER(SEQ))+1 FROM NOTICES
		</selectKey>
		INSERT INTO NOTICES(SEQ, TITLE, CONTENT, WRITER, REGDATE, HIT, FILESRC) 
	    VALUES(#{seq}, #{title}, #{content}, 'kosa', SYSDATE, 0, #{fileSrc})
	</insert>
</mapper> 


